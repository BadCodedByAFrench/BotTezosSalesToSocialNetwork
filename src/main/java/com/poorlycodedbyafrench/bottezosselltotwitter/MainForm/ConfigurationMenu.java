/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.poorlycodedbyafrench.bottezosselltotwitter.MainForm;

import com.poorlycodedbyafrench.bottezosselltotwitter.Core.Configuration.BotConfiguration;
import com.poorlycodedbyafrench.bottezosselltotwitter.Core.Configuration.LogManager;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Vector;
import java.util.concurrent.TimeUnit;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * Form the customize the bot
 * @author david
 */
public class ConfigurationMenu extends javax.swing.JPanel {

    /**
     * Creates new form ConfigurationMenu
     */
    public ConfigurationMenu() {
        initComponents();
        
        this.combo_refresh_sales.addItem(TimeUnit.MINUTES.toString());
        this.combo_refresh_sales.addItem(TimeUnit.HOURS.toString());
        this.combo_refresh_sales.addItem(TimeUnit.DAYS.toString());
        
        this.combo_refresh_stat.addItem(TimeUnit.HOURS.toString());
        this.combo_refresh_stat.addItem(TimeUnit.DAYS.toString());
        
        this.combo_order_sales.addItem("Timestamp");
        this.combo_order_sales.addItem("Price");
        
        //Take from https://stackhowto.com/how-to-make-jtextfield-accept-only-numbers/
        this.txt_refresh_sales.addKeyListener(new KeyAdapter() {
        public void keyTyped(KeyEvent e) {
            char c = e.getKeyChar();
            if ( ((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)) {
                e.consume();  
            }
         }
        });
      
        this.txt_refresh_stats.addKeyListener(new KeyAdapter() {
        public void keyTyped(KeyEvent e) {
            char c = e.getKeyChar();
            if ( ((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)) {
                e.consume();  
            }
         }
        });
        
        setValue();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane4 = new javax.swing.JScrollPane();
        tbl_sentences = new javax.swing.JTable();
        btn_add_sentence = new javax.swing.JButton();
        btn_remove_sentence = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        tbl_hashtags = new javax.swing.JTable();
        btn_add_hashtag = new javax.swing.JButton();
        btn_remove_hashtag = new javax.swing.JButton();
        lbl_max_stat = new javax.swing.JLabel();
        min_avg_stat = new javax.swing.JLabel();
        lbl_avg_stat = new javax.swing.JLabel();
        lbl_id_stat = new javax.swing.JLabel();
        lbl_refresh_stat = new javax.swing.JLabel();
        txt_refresh_stats = new javax.swing.JTextField();
        lbl_stat = new javax.swing.JLabel();
        combo_refresh_stat = new javax.swing.JComboBox<>();
        cb_id_stat = new javax.swing.JCheckBox();
        cb_avg_stat = new javax.swing.JCheckBox();
        cb_min_stat = new javax.swing.JCheckBox();
        cb_max_stat = new javax.swing.JCheckBox();
        lbl_sales1 = new javax.swing.JLabel();
        txt_refresh_sales = new javax.swing.JTextField();
        lbl_refresh_sales = new javax.swing.JLabel();
        combo_refresh_sales = new javax.swing.JComboBox<>();
        cb_id_sales = new javax.swing.JCheckBox();
        combo_order_sales = new javax.swing.JComboBox<>();
        lbl_order_sales = new javax.swing.JLabel();
        lbl_id_sales = new javax.swing.JLabel();
        lbl_type_sales = new javax.swing.JLabel();
        cb_type_sales = new javax.swing.JCheckBox();
        lbl_buyer_sales = new javax.swing.JLabel();
        cb_adress_sales = new javax.swing.JCheckBox();
        btn_save = new javax.swing.JButton();
        btn_reset = new javax.swing.JButton();
        lbl_IPFS_sales = new javax.swing.JLabel();
        cb_IPFS_sales = new javax.swing.JCheckBox();
        btn_Export = new javax.swing.JButton();
        btn_import = new javax.swing.JButton();
        lbl_royalty_wallet_sales = new javax.swing.JLabel();
        cb_royalty_wallet_sales = new javax.swing.JCheckBox();
        lbl_royalty_wallet_stat = new javax.swing.JLabel();
        cb_royalty_wallet_stat = new javax.swing.JCheckBox();
        lbl_name_royalty_wallet = new javax.swing.JLabel();
        tb_name_royalty_wallet = new javax.swing.JTextField();

        tbl_sentences.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sentences"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tbl_sentences);

        btn_add_sentence.setText("Add");
        btn_add_sentence.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_add_sentenceActionPerformed(evt);
            }
        });

        btn_remove_sentence.setText("Remove");
        btn_remove_sentence.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_remove_sentenceActionPerformed(evt);
            }
        });

        tbl_hashtags.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Hashtags"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane6.setViewportView(tbl_hashtags);

        btn_add_hashtag.setText("Add");
        btn_add_hashtag.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_add_hashtagActionPerformed(evt);
            }
        });

        btn_remove_hashtag.setText("Remove");
        btn_remove_hashtag.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_remove_hashtagActionPerformed(evt);
            }
        });

        lbl_max_stat.setText("Max price");

        min_avg_stat.setText("Min price");

        lbl_avg_stat.setText("Average price");

        lbl_id_stat.setText("Id tweet");

        lbl_refresh_stat.setText("Refresh every");

        lbl_stat.setText("Stat");

        cb_id_stat.setText("Show");

        cb_avg_stat.setText("Show");

        cb_min_stat.setText("Show");

        cb_max_stat.setText("Show");

        lbl_sales1.setText("Sales");

        lbl_refresh_sales.setText("Refresh every");

        cb_id_sales.setText("Show");

        lbl_order_sales.setText("Order by");

        lbl_id_sales.setText("Id tweet");

        lbl_type_sales.setText("Sale type");

        cb_type_sales.setText("Show");

        lbl_buyer_sales.setText("Address");

        cb_adress_sales.setText("Show");

        btn_save.setText("Save");
        btn_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_saveActionPerformed(evt);
            }
        });

        btn_reset.setText("Reset");
        btn_reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_resetActionPerformed(evt);
            }
        });

        lbl_IPFS_sales.setText("IPFS");

        cb_IPFS_sales.setText("Show");

        btn_Export.setText("Export");
        btn_Export.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ExportActionPerformed(evt);
            }
        });

        btn_import.setText("Import");
        btn_import.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_importActionPerformed(evt);
            }
        });

        lbl_royalty_wallet_sales.setText("Royalty wallet");

        cb_royalty_wallet_sales.setText("Show");

        lbl_royalty_wallet_stat.setText("Royalty wallet");

        cb_royalty_wallet_stat.setText("Show");

        lbl_name_royalty_wallet.setText("Name of the label for royalty wallet");

        tb_name_royalty_wallet.setText("Wallet balance");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(118, 118, 118)
                .addComponent(lbl_sales1)
                .addGap(339, 339, 339)
                .addComponent(lbl_stat))
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(lbl_refresh_sales)
                .addGap(18, 18, 18)
                .addComponent(txt_refresh_sales, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(combo_refresh_sales, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addComponent(lbl_refresh_stat)
                .addGap(18, 18, 18)
                .addComponent(txt_refresh_stats, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(combo_refresh_stat, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(lbl_id_sales)
                .addGap(190, 190, 190)
                .addComponent(cb_id_sales)
                .addGap(47, 47, 47)
                .addComponent(lbl_id_stat)
                .addGap(186, 186, 186)
                .addComponent(cb_id_stat))
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_order_sales)
                    .addComponent(lbl_type_sales)
                    .addComponent(lbl_buyer_sales)
                    .addComponent(lbl_IPFS_sales))
                .addGap(125, 125, 125)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(combo_order_sales, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cb_type_sales)
                            .addComponent(cb_adress_sales)
                            .addComponent(cb_IPFS_sales))))
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_avg_stat)
                    .addComponent(min_avg_stat)
                    .addComponent(lbl_max_stat)
                    .addComponent(lbl_royalty_wallet_stat))
                .addGap(156, 156, 156)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cb_avg_stat)
                    .addComponent(cb_min_stat)
                    .addComponent(cb_max_stat)
                    .addComponent(cb_royalty_wallet_stat)))
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_add_sentence, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_remove_sentence))
                .addGap(111, 111, 111)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_add_hashtag, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_remove_hashtag)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(btn_save, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(btn_reset))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(btn_import)
                        .addGap(6, 6, 6)
                        .addComponent(btn_Export))))
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lbl_name_royalty_wallet)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbl_royalty_wallet_sales)
                        .addGap(156, 156, 156)
                        .addComponent(cb_royalty_wallet_sales, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(tb_name_royalty_wallet, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_sales1)
                    .addComponent(lbl_stat))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(lbl_refresh_sales))
                    .addComponent(txt_refresh_sales, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(combo_refresh_sales, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(lbl_refresh_stat))
                    .addComponent(txt_refresh_stats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(combo_refresh_stat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_id_sales)
                    .addComponent(cb_id_sales)
                    .addComponent(lbl_id_stat)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(cb_id_stat)))
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(lbl_order_sales)
                        .addGap(4, 4, 4)
                        .addComponent(lbl_type_sales)
                        .addGap(4, 4, 4)
                        .addComponent(lbl_buyer_sales)
                        .addGap(4, 4, 4)
                        .addComponent(lbl_IPFS_sales))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(combo_order_sales, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addComponent(cb_type_sales)
                        .addGap(2, 2, 2)
                        .addComponent(cb_adress_sales)
                        .addGap(2, 2, 2)
                        .addComponent(cb_IPFS_sales))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbl_avg_stat)
                        .addGap(4, 4, 4)
                        .addComponent(min_avg_stat)
                        .addGap(4, 4, 4)
                        .addComponent(lbl_max_stat)
                        .addGap(4, 4, 4)
                        .addComponent(lbl_royalty_wallet_stat))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cb_avg_stat)
                        .addGap(2, 2, 2)
                        .addComponent(cb_min_stat)
                        .addGap(2, 2, 2)
                        .addComponent(cb_max_stat)
                        .addGap(2, 2, 2)
                        .addComponent(cb_royalty_wallet_stat)))
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_royalty_wallet_sales)
                    .addComponent(cb_royalty_wallet_sales))
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_name_royalty_wallet)
                    .addComponent(tb_name_royalty_wallet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btn_add_sentence)
                        .addGap(12, 12, 12)
                        .addComponent(btn_remove_sentence))
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btn_add_hashtag)
                        .addGap(12, 12, 12)
                        .addComponent(btn_remove_hashtag)
                        .addGap(114, 114, 114)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btn_save)
                            .addComponent(btn_reset))
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btn_import)
                            .addComponent(btn_Export)))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btn_add_sentenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_add_sentenceActionPerformed
        ((DefaultTableModel)this.tbl_sentences.getModel()).addRow(new Object[]{""});
        btn_remove_sentence.setEnabled(true);
    }//GEN-LAST:event_btn_add_sentenceActionPerformed

    private void btn_remove_sentenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_remove_sentenceActionPerformed
        DefaultTableModel dtb = ((DefaultTableModel)this.tbl_sentences.getModel());
        if(tbl_sentences.getSelectedRows().length != 0){
            
            int[] allIndex = tbl_sentences.getSelectedRows();
            int[] reversedAllIndex = Arrays.stream(allIndex).boxed()
                    .sorted(Collections.reverseOrder())
                    .mapToInt(Integer::intValue)
                    .toArray();

            for (int i : reversedAllIndex ){
                 dtb.removeRow(i);
            }
        }
        else{
            dtb.removeRow(dtb.getRowCount()-1);
        }
        
        if (dtb.getRowCount() <= 0){
            btn_remove_sentence.setEnabled(false);
        }
    }//GEN-LAST:event_btn_remove_sentenceActionPerformed

    private void btn_add_hashtagActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_add_hashtagActionPerformed
        ((DefaultTableModel)this.tbl_hashtags.getModel()).addRow(new Object[]{""});
        btn_remove_hashtag.setEnabled(true);
    }//GEN-LAST:event_btn_add_hashtagActionPerformed

    private void btn_remove_hashtagActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_remove_hashtagActionPerformed
        DefaultTableModel dtb = ((DefaultTableModel)this.tbl_hashtags.getModel());
        if(tbl_hashtags.getSelectedRows().length != 0){
            
            int[] allIndex = tbl_hashtags.getSelectedRows();
            int[] reversedAllIndex = Arrays.stream(allIndex).boxed()
                    .sorted(Collections.reverseOrder())
                    .mapToInt(Integer::intValue)
                    .toArray();

            for (int i : reversedAllIndex ){
                 dtb.removeRow(i);
            }
        }
        else{
            dtb.removeRow(dtb.getRowCount()-1);
        }
        
        if (dtb.getRowCount() <= 0){
            btn_remove_hashtag.setEnabled(false);
        }
    }//GEN-LAST:event_btn_remove_hashtagActionPerformed

    /**
     * Check the value in field and if correct then we save them 
     */
    
    private void btn_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_saveActionPerformed
        
        boolean checkValue = true;
        
        List<String> sentences = new ArrayList<String>(); 
        Vector<Vector> sentencesData = ((DefaultTableModel)this.tbl_sentences.getModel()).getDataVector();
        for(Vector v : sentencesData){
            if(v.get(0).toString().isBlank() || v.get(0).toString().contains("#&#")){
                checkValue = false;
            }
            sentences.add(v.get(0).toString());
        }
        
        List<String> hashtags = new ArrayList<String>(); 
        Vector<Vector> hashtagsData = ((DefaultTableModel)this.tbl_hashtags.getModel()).getDataVector();
        for(Vector v : hashtagsData){
            if(v.get(0).toString().isBlank() || v.get(0).toString().contains("#&#") ){
                checkValue = false;
            }
            
            hashtags.add(v.get(0).toString());
        }
        
        if( Integer.valueOf(this.txt_refresh_sales.getText()) == 0 || Integer.valueOf(this.txt_refresh_stats.getText()) == 0 ){
            checkValue = false;
        } 
        
        if (checkValue){
            BotConfiguration.getConfiguration().setRefreshSalesTime(Integer.valueOf(this.txt_refresh_sales.getText()));
            BotConfiguration.getConfiguration().setRefreshSalesStats(Integer.valueOf(this.txt_refresh_stats.getText()));

            BotConfiguration.getConfiguration().setSecurityIdSales(this.cb_id_sales.isSelected());
            BotConfiguration.getConfiguration().setSecurityIdStats(this.cb_id_stat.isSelected());

            BotConfiguration.getConfiguration().setSaleType(this.cb_type_sales.isSelected());
            BotConfiguration.getConfiguration().setAdress(this.cb_adress_sales.isSelected());
            BotConfiguration.getConfiguration().setIpfs(this.cb_IPFS_sales.isSelected());
            
            BotConfiguration.getConfiguration().setAvgPriceStat(this.cb_avg_stat.isSelected());
            BotConfiguration.getConfiguration().setMinPriceStat(this.cb_min_stat.isSelected());
            BotConfiguration.getConfiguration().setMaxPriceStat(this.cb_max_stat.isSelected());

            BotConfiguration.getConfiguration().setRefreshSales(TimeUnit.valueOf(this.combo_refresh_sales.getSelectedItem().toString().toUpperCase()));
            BotConfiguration.getConfiguration().setRefreshStats(TimeUnit.valueOf(this.combo_refresh_stat.getSelectedItem().toString().toUpperCase()));
            BotConfiguration.getConfiguration().setOrderBy(this.combo_order_sales.getSelectedIndex());

            BotConfiguration.getConfiguration().setSentences(sentences);
            BotConfiguration.getConfiguration().setHashtags(hashtags);
            
            BotConfiguration.getConfiguration().setRoyaltywalletsale(this.cb_royalty_wallet_sales.isSelected());
            BotConfiguration.getConfiguration().setRoyaltywalletstat(this.cb_royalty_wallet_stat.isSelected());
            BotConfiguration.getConfiguration().setNameroyaltywallet(this.tb_name_royalty_wallet.getText().trim());
        }
        else{
            JOptionPane.showMessageDialog(null, "Check if there's a sentence and/or hashtag empty, please be sure to unselect in both tables \nPlease not put 0 in any of the number field", "Empty field", JOptionPane.WARNING_MESSAGE);
        }
        
    }//GEN-LAST:event_btn_saveActionPerformed

    private void btn_resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_resetActionPerformed
        setValue();
    }//GEN-LAST:event_btn_resetActionPerformed

    private void btn_ExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ExportActionPerformed
        try {
            BotConfiguration.getConfiguration().export();
        } catch (IOException ex) {
            LogManager.getLogManager().writeLog(ConfigurationMenu.class.getName(), ex);
        } catch (Exception ex) {
            LogManager.getLogManager().writeLog(ConfigurationMenu.class.getName(), ex);
        }
    }//GEN-LAST:event_btn_ExportActionPerformed

    private void btn_importActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_importActionPerformed
        try {
            BotConfiguration.getConfiguration().importFile();
            setValue();
        } catch (IOException ex) {
            LogManager.getLogManager().writeLog(ConfigurationMenu.class.getName(), ex);
        }
        catch(Exception ex){
            LogManager.getLogManager().writeLog(ConfigurationMenu.class.getName(), ex);
        }
    }//GEN-LAST:event_btn_importActionPerformed

    /**
     * Set value from the Singleton Object to the field
     */
    private void setValue(){
        
        
        this.txt_refresh_sales.setText(String.valueOf(BotConfiguration.getConfiguration().getRefreshSalesTime()));
        this.txt_refresh_stats.setText(String.valueOf(BotConfiguration.getConfiguration().getRefreshSalesStats())); 
        
        this.cb_id_sales.setSelected(BotConfiguration.getConfiguration().isSecurityIdSales());
        this.cb_id_stat.setSelected(BotConfiguration.getConfiguration().isSecurityIdStats());
        
        this.cb_type_sales.setSelected(BotConfiguration.getConfiguration().isSaleType());
        this.cb_adress_sales.setSelected(BotConfiguration.getConfiguration().isAdress());
        this.cb_IPFS_sales.setSelected(BotConfiguration.getConfiguration().isIpfs());
        
        this.cb_avg_stat.setSelected(BotConfiguration.getConfiguration().isAvgPriceStat());
        this.cb_min_stat.setSelected(BotConfiguration.getConfiguration().isMinPriceStat());
        this.cb_max_stat.setSelected(BotConfiguration.getConfiguration().isMaxPriceStat());
        
        this.combo_refresh_sales.setSelectedItem(BotConfiguration.getConfiguration().getRefreshSales().toString());
        this.combo_refresh_stat.setSelectedItem(BotConfiguration.getConfiguration().getRefreshStats().toString());
        this.combo_order_sales.setSelectedIndex(BotConfiguration.getConfiguration().getOrderBy());
        
        ((DefaultTableModel)this.tbl_sentences.getModel()).setRowCount(0);
        ((DefaultTableModel)this.tbl_hashtags.getModel()).setRowCount(0);
        
        for(String s : BotConfiguration.getConfiguration().getSentences()){
            ((DefaultTableModel)this.tbl_sentences.getModel()).addRow(new Object[]{s});
        }
        
        for(String s : BotConfiguration.getConfiguration().getHashtags()){
            ((DefaultTableModel)this.tbl_hashtags.getModel()).addRow(new Object[]{s});
        }
        
        this.cb_royalty_wallet_sales.setSelected(BotConfiguration.getConfiguration().isRoyaltywalletsale());
        this.cb_royalty_wallet_stat.setSelected(BotConfiguration.getConfiguration().isRoyaltywalletstat());
        
        this.tb_name_royalty_wallet.setText(BotConfiguration.getConfiguration().getNameroyaltywallet());
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_Export;
    private javax.swing.JButton btn_add_hashtag;
    private javax.swing.JButton btn_add_sentence;
    private javax.swing.JButton btn_import;
    private javax.swing.JButton btn_remove_hashtag;
    private javax.swing.JButton btn_remove_sentence;
    private javax.swing.JButton btn_reset;
    private javax.swing.JButton btn_save;
    private javax.swing.JCheckBox cb_IPFS_sales;
    private javax.swing.JCheckBox cb_adress_sales;
    private javax.swing.JCheckBox cb_avg_stat;
    private javax.swing.JCheckBox cb_id_sales;
    private javax.swing.JCheckBox cb_id_stat;
    private javax.swing.JCheckBox cb_max_stat;
    private javax.swing.JCheckBox cb_min_stat;
    private javax.swing.JCheckBox cb_royalty_wallet_sales;
    private javax.swing.JCheckBox cb_royalty_wallet_stat;
    private javax.swing.JCheckBox cb_type_sales;
    private javax.swing.JComboBox<String> combo_order_sales;
    private javax.swing.JComboBox<String> combo_refresh_sales;
    private javax.swing.JComboBox<String> combo_refresh_stat;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JLabel lbl_IPFS_sales;
    private javax.swing.JLabel lbl_avg_stat;
    private javax.swing.JLabel lbl_buyer_sales;
    private javax.swing.JLabel lbl_id_sales;
    private javax.swing.JLabel lbl_id_stat;
    private javax.swing.JLabel lbl_max_stat;
    private javax.swing.JLabel lbl_name_royalty_wallet;
    private javax.swing.JLabel lbl_order_sales;
    private javax.swing.JLabel lbl_refresh_sales;
    private javax.swing.JLabel lbl_refresh_stat;
    private javax.swing.JLabel lbl_royalty_wallet_sales;
    private javax.swing.JLabel lbl_royalty_wallet_stat;
    private javax.swing.JLabel lbl_sales1;
    private javax.swing.JLabel lbl_stat;
    private javax.swing.JLabel lbl_type_sales;
    private javax.swing.JLabel min_avg_stat;
    private javax.swing.JTextField tb_name_royalty_wallet;
    private javax.swing.JTable tbl_hashtags;
    private javax.swing.JTable tbl_sentences;
    private javax.swing.JTextField txt_refresh_sales;
    private javax.swing.JTextField txt_refresh_stats;
    // End of variables declaration//GEN-END:variables
}
